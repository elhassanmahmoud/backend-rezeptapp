plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.5'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.rezeptapp'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	// App
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// PostgreSQL (für Produktion)
	runtimeOnly 'org.postgresql:postgresql'

	// H2 (für Tests)
	testRuntimeOnly 'com.h2database:h2'

	// Tests
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

//  .env-Datei einlesen – notwendig für lokale Entwicklung und Render-Build
def envFile = file('.env')
if (envFile.exists()) {
	println '.env gefunden – Lade Umgebungsvariablen für den Build...'
	envFile.eachLine {
		if (it && !it.startsWith('#') && it.contains('=')) {
			def (key, value) = it.split('=', 2)
			if (key && value) {
				ext[key.trim()] = value.trim()
				println " → Setze ${key.trim()}"
			}
		}
	}
}

//  Environment-Variablen an bootRun übergeben (nachdem ext befüllt wurde)
tasks.named('bootRun') {
	if (ext.has('DB_URL')) {
		environment 'DB_URL', ext['DB_URL']
		environment 'DB_USERNAME', ext['DB_USERNAME']
		environment 'DB_PASSWORD', ext['DB_PASSWORD']
	}
}